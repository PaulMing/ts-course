// tsconfig.json支持写注释 -> json文件并不支持注释，这里仅仅是ts的处理
{
  // 编译目录: **表示任意文件夹  *表示任意文件
  "include": [
    "./src/**/*",
    "./test4/*"
  ],
  // 不包含/排除的编译目录
  "exclude": [
    "./src/test/**/*",
    "./test3/*"
  ],
  // 指定具体编译文件列表 -> 不推荐使用
  "files": [
    "./src/index.ts",
    // "a.ts",
    // "b.ts"
  ],
  // 编译器选项
  "compilerOptions": {
    // 编译后的目标代码es版本: "ES3", "ES5", "ES6", "ES2015", "ES2016", "ES2017", "ES2018", "ES2019", "ES2020", "ES2021", "ES2022", "ESNext" -> 其能编译处理'语法糖'层面的改动，并不能处理新语法[例如promise]，因此兼容低版本浏览器依旧需要借助babel[babel默认也是不处理新语法的，但可添加预设，预设提供polyfill底层模拟实现新语法，例如经常使用的core-js，其会提供部分js执行环境，老版本浏览器不兼容的js可在该环境下运行来实现兼容]
    "target": "ES2020",
    // 支持的模块化标准: "CommonJS", "AMD", "System", "UMD", "ES6", "ES2015", "ES2020", "ESNext", "None", "ES2022", "Node12", "NodeNext"
    "module": "ES6", 
    // 指定项目中要使用的库，一般都不用设置，使用ts默认项即可
    // "lib": [],//["es2016","DOM","BOM"] -> 除了此处标识的库，其它库都不能使用，所以还是使用默认项即可
    // 编译后文件所在目录，
    "outDir": "./dist",
    // 所有全局作用域中的代码会合并到同一个文件中 -> 必须使用amd或system
    // "outFile": "./dist/app.js",
    // 是否对js文件进行编译，默认是false，最终生成目录中没有js文件
    "allowJs": false,
    // 是否检查js代码符合语法规范，默认是false
    "checkJs": false,
    // 是否移掉注释
    "removeComments": true,
    // 不生成编译后的文件
    "noEmit": false,
    // 当有错误时不生成编译后的文件
    "noEmitOnError": false,
    // 编译后的文件是否启用严格模式
    "alwaysStrict": false,
    // 是否允许默认的any类型，默认是允许/true
    "noImplicitAny": false,
    // 不允许不明确类型的this
    "noImplicitThis": false,
    // 严格的检查空值
    "strictNullChecks": true,
    // 所有严格检查的总开关：true表示上面那些及所有检查都开启、false表示都关闭[可以设置为false后再单独设置其它]
    "strict": true
  },
  // 定义被继承的配置文件
  // "extends": "./config/otherconfig.json"
}